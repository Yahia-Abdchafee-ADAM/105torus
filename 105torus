#!/usr/bin/env node
/*
** EPITECH PROJECT, 2021
** B-MAT-100-PAR-1-1-105torus-anatole.babin
** File description:
** 105torus.js
*/

var argv = process.argv;
argc = argv.length
opt = parseFloat(argv[2]);
a0 = parseFloat(argv[3]);
a1 = parseFloat(argv[4]);
a2 = parseFloat(argv[5]);
a3 = parseFloat(argv[6]);
a4 = parseFloat(argv[7]);
n = parseFloat(argv[8]);
prs = Math.pow(10, -n);

const usage = require("./usage");
const error = require("./handling_error");

function define_f(x)
{
    res = (a4 * Math.pow(x, 4))  + (a3 * Math.pow(x, 3)) + (a2 * Math.pow(x, 2)) + (a1 * x) + a0;
    return(res);
}

function deriv_f(x)
{
    res = 4 * a4 * Math.pow(x, 3) + 3 * a3 * Math.pow(x, 2) + 2 * a2 * x + a1;
    return (res);
}

function bisection_method(argv, argc)
{
    a = 0;
    b = 1;
    c = 0;
    xa = define_f(a);
    xb = define_f(b);
    x = 1;

    while (Math.abs(c - x) >= prs) {
        x = c;
        c = (a + b) / 2;
        if (define_f(a) * define_f(c) < 0)
            b = c;
        else
            a = c;
        if ((Math.pow(10, n) * c % 1 == 0))
            console.log("x =",c);
        else 
            console.log("x =",c.toFixed(n));
    }
}

function newton_method(argv, argc)
{
    c = 1;
    x = 0.5;

    while(Math.abs(x - c) >= prs) {
        c = x;
        if ((Math.pow(10, n) * x % 1 == 0))
            console.log("x =",x);
        else 
            console.log("x =",x.toFixed(n));
        x = x - (define_f(x)/ deriv_f(x));
    }
}

function secant_method(argv, argc)
{
    x = 0;
    x0 = 0;
    xn = 1;

    while (Math.abs(xn - x0) > prs) {
        x = xn - define_f(xn) * (xn - x0) / (define_f(xn) - define_f(x0))
        xn = x;
        x0 = xn;
        if ((Math.pow(10, n) * x % 1 == 0))
            console.log("x =",x);
        else
            console.log("x =",x.toFixed(n));
    }
}

function torus(argv, argc)
{
    if (argc == 3) {
        if (argv[2][0] == '-' && argv[2][1] == 'h') {
            usage.usage();
            return (0);
        }
    }
    if (error.handling_error(argv, argc) == 84)
        return (84);
    if (opt == 1) {
        if (bisection_method(argv, argc) == -1)
            return (84);
    }
    if (opt == 2) {
        if (newton_method(argv, argc) == -1)
            return (84);
    }
    if (opt == 3) {
        if (secant_method(argv, argc) == -1)
            return (84);
    }
    return (0);
}

torus(argv, argc);